@page "/trainingplans/create"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using GrindingPlanner.Shared
@using GrindingPlanner.Data

@inject IDbContextFactory<GrindingPlanner.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager;
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider;

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>TrainingPlan</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="TrainingPlan" OnValidSubmit="AddTrainingPlan" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="trainingplanname" class="form-label">TrainingPlanName:</label> 
                <InputText id="trainingplanname" @bind-Value="TrainingPlan.TrainingPlanName" class="form-control" /> 
                <ValidationMessage For="() => TrainingPlan.TrainingPlanName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="ownerid" class="form-label">OwnerId:</label> 
                <InputText id="ownerid" @bind-Value="TrainingPlan.OwnerId" class="form-control" /> 
                <ValidationMessage For="() => TrainingPlan.OwnerId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="trainerid" class="form-label">TrainerId:</label> 
                <InputText id="trainerid" @bind-Value="TrainingPlan.TrainerId" class="form-control" /> 
                <ValidationMessage For="() => TrainingPlan.TrainerId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/trainingplans">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public TrainingPlan TrainingPlan { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddTrainingPlan()
    {
        using var context = DbFactory.CreateDbContext();

        await SetLoggedUserAsTrainingPlanOwner();

        context.TrainingPlan.Add(TrainingPlan);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/trainingplans");
    }

    public async Task SetLoggedUserAsTrainingPlanOwner()
    {
        AuthenticationState state = await authenticationStateProvider.GetAuthenticationStateAsync();
        ApplicationUser? user = await userManager.GetUserAsync(state.User);
        if (user is not null)
        {
            TrainingPlan.OwnerId = user.Id;
        }
    }
}
